AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  hello-knox

  Sample SAM Template for hello-knox

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  ConnectionsTable8000B8A1:
    Type: "AWS::DynamoDB::Table"
    Properties:
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  ConnectHandlerServiceRole7E4A9B1F:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  ConnectHandlerServiceRoleDefaultPolicy7DE94863:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "dynamodb:BatchWriteItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:DeleteItem"
            Effect: Allow
            Resource:
              - !GetAtt
                - ConnectionsTable8000B8A1
                - Arn
              - !Ref "AWS::NoValue"
        Version: 2012-10-17
      PolicyName: ConnectHandlerServiceRoleDefaultPolicy7DE94863
      Roles:
        - !Ref ConnectHandlerServiceRole7E4A9B1F
  ConnectHandler2FFD52D8:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: connect/
      Role: !GetAtt
        - ConnectHandlerServiceRole7E4A9B1F
        - Arn
      Environment:
        Variables:
          table: !Ref ConnectionsTable8000B8A1
      Handler: app.lambda_handler
      Runtime: python3.9
    DependsOn:
      - ConnectHandlerServiceRoleDefaultPolicy7DE94863
      - ConnectHandlerServiceRole7E4A9B1F
  DisconnectHandlerServiceRoleE54F14F9:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  DisconnectHandlerServiceRoleDefaultPolicy1800B9E5:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "dynamodb:BatchWriteItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:DeleteItem"
            Effect: Allow
            Resource:
              - !GetAtt
                - ConnectionsTable8000B8A1
                - Arn
              - !Ref "AWS::NoValue"
        Version: 2012-10-17
      PolicyName: DisconnectHandlerServiceRoleDefaultPolicy1800B9E5
      Roles:
        - !Ref DisconnectHandlerServiceRoleE54F14F9
  DisconnectHandlerCB7ED6F7:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: disconnect/
      Role: !GetAtt
        - DisconnectHandlerServiceRoleE54F14F9
        - Arn
      Environment:
        Variables:
          table: !Ref ConnectionsTable8000B8A1
      Handler: app.lambda_handler
      Runtime: python3.9
    DependsOn:
      - DisconnectHandlerServiceRoleDefaultPolicy1800B9E5
      - DisconnectHandlerServiceRoleE54F14F9
  MessageHandlerServiceRoleDF05266A:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  MessageHandlerServiceRoleDefaultPolicyD818A6AA:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:GetRecords"
              - "dynamodb:GetShardIterator"
              - "dynamodb:Query"
              - "dynamodb:GetItem"
              - "dynamodb:Scan"
              - "dynamodb:ConditionCheckItem"
            Effect: Allow
            Resource:
              - !GetAtt
                - ConnectionsTable8000B8A1
                - Arn
              - !Ref "AWS::NoValue"
        Version: 2012-10-17
      PolicyName: MessageHandlerServiceRoleDefaultPolicyD818A6AA
      Roles:
        - !Ref MessageHandlerServiceRoleDF05266A
  SendMessageHandlerDFBBCD6B:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: sendmessage/
      Role: !GetAtt
        - MessageHandlerServiceRoleDF05266A
        - Arn
      Environment:
        Variables:
          table: !Ref ConnectionsTable8000B8A1
      Handler: app.lambda_handler
      Runtime: python3.9
    DependsOn:
      - MessageHandlerServiceRoleDefaultPolicyD818A6AA
      - MessageHandlerServiceRoleDF05266A
  DefaultHandlerServiceRoleDF00569C:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  DefaultHandlerServiceRoleDefaultPolicy2F57C32F:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action: "execute-api:ManageConnections"
            Effect: Allow
            Resource: !Join
              - ""
              - - "arn:aws:execute-api:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":*/*/POST/@connections/*"
          - Action: "execute-api:ManageConnections"
            Effect: Allow
            Resource: !Join
              - ""
              - - "arn:aws:execute-api:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":*/*/GET/@connections/*"
        Version: 2012-10-17
      PolicyName: DefaultHandlerServiceRoleDefaultPolicy2F57C32F
      Roles:
        - !Ref DefaultHandlerServiceRoleDF00569C
  DefaultHandler604DF7AC:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: default/
      Role: !GetAtt
        - DefaultHandlerServiceRoleDF00569C
        - Arn
      Handler: app.lambda_handler
      Runtime: python3.9
    DependsOn:
      - DefaultHandlerServiceRoleDefaultPolicy2F57C32F
      - DefaultHandlerServiceRoleDF00569C
  manageConnections7F91357B:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action: "execute-api:ManageConnections"
            Effect: Allow
            Resource: !Join
              - ""
              - - "arn:aws:execute-api:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":*/*/POST/@connections/*"
        Version: 2012-10-17
      PolicyName: manageConnections7F91357B
      Roles:
        - !Ref MessageHandlerServiceRoleDF05266A
